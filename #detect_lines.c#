#include "pixel_operations.h"
#include <SDL/SDL.h>
#include <SDL/SDL_image.h>
#include <err.h>
#include <stdio.h>
#include <stdlib.h>


struct matrix
{
  size_t lines;
  size_t columns;
  double **mat;
};

struct matrix *init_mat(size_t lines, size_t columns)
{
  struct matrix *m = malloc(sizeof(struct matrix));
  m->lines = lines;
  m->columns = columns;

  double **mat;
  mat = malloc(lines * sizeof(double *));
  for (size_t i = 0; i< lines; i++)
    mat[i] =calloc (columns, sizeof(double));
  m->mat = mat;
  return m;
}

void print_mat(struct matrix *m)
{
  for (size_t i = 0; i < m->lines; i++)
    {
      for (size_t j = 0; j < m->columns; j++)
	printf("%f ", m->mat[i][j]);
      printf("\n");
    }
}

void clean_mat(struct matrix *m)
{
  for (size_t i = 0; i< m->lines; i++)
    free(m->mat[i]);
  free(m->mat);
  free(m);
}

void wait_for_keypressed(void) {
  SDL_Event             event;
  // Infinite loop, waiting for event
  for (;;) {
    // Take an event
    SDL_PollEvent( &event );
    // Switch on event type
    switch (event.type) {
    // Someone pressed a key -> leave the function
    case SDL_KEYDOWN: return;
    default: break;
    }
  // Loop until we got the expected event
  }
}

void init_sdl(void) {
  // Init only the video part
  if( SDL_Init(SDL_INIT_VIDEO)==-1 ) {
    // If it fails, die with an error message
    errx(1,"Could not initialize SDL: %s.\n", SDL_GetError());
  }
  // We don't really need a function for that ...
}

SDL_Surface* load_image(char *path) {
  SDL_Surface          *img;
  // Load an image using SDL_image with format detection
  img = IMG_Load(path);
  if (!img)
    // If it fails, die with an error message
    errx(3, "can't load %s: %s", path, IMG_GetError());
  return img;
}

SDL_Surface* display_image(SDL_Surface *img) {
  SDL_Surface          *screen;
  // Set the window to the same size as the image
  screen = SDL_SetVideoMode(img->w, img->h, 0, SDL_SWSURFACE|SDL_ANYFORMAT);
  if ( screen == NULL ) {
    // error management
    errx(1, "Couldn't set %dx%d video mode: %s\n",
         img->w, img->h, SDL_GetError());
  }

  /* Blit onto the screen surface */
  if(SDL_BlitSurface(img, NULL, screen, NULL) < 0)
    warnx("BlitSurface error: %s\n", SDL_GetError());

  // Update the screen
  SDL_UpdateRect(screen, 0, 0, img->w, img->h);

  // wait for a key
  wait_for_keypressed();

  // return the screen for further uses
  return screen;
}
static inline
Uint8* pixelref(SDL_Surface *surf, unsigned x, unsigned y) {
  int bpp = surf->format->BytesPerPixel;
  return (Uint8*)surf->pixels + y * surf->pitch + x * bpp;
}

Uint32 getpixel(SDL_Surface *surface, unsigned x, unsigned y) {
  Uint8 *p = pixelref(surface, x, y);
  switch(surface->format->BytesPerPixel) {
  case 1:
    return *p;
  case 2:
    return *(Uint16 *)p;
  case 3:
    if(SDL_BYTEORDER == SDL_BIG_ENDIAN)
      return p[0] << 16 | p[1] << 8 | p[2];
    else
      return p[0] | p[1] << 8 | p[2] << 16;
  case 4:
    return *(Uint32 *)p;
  }
  return 0;
}

void putpixel(SDL_Surface *surface, unsigned x, unsigned y, Uint32 pixel) {
  Uint8 *p = pixelref(surface, x, y);
  switch(surface->format->BytesPerPixel) {
  case 1:
    *p = pixel;
    break;
  case 2:
    *(Uint16 *)p = pixel;
    break;
  case 3:
    if(SDL_BYTEORDER == SDL_BIG_ENDIAN) {
      p[0] = (pixel >> 16) & 0xff;
      p[1] = (pixel >> 8) & 0xff;
      p[2] = pixel & 0xff;
    } else {
      p[0] = pixel & 0xff;
      p[1] = (pixel >> 8) & 0xff;
      p[2] = (pixel >> 16) & 0xff;
    }
    break;
  case 4:
    *(Uint32 *)p = pixel;
    break;
  }
}

void greyscale(SDL_Surface *img)
{
  int    x;
  int    y;
  Uint8  avg;
  Uint8  r;
  Uint8  g;
  Uint8  b;
  Uint32 pixel;
  avg = 0;
  pixel = 0;
  for (x = 0; x < img->w; x++)
    {
      for (y = 0; y < img->h; y++)
	{
	  pixel = getpixel(img, (unsigned)x,(unsigned) y);
	  SDL_GetRGB(pixel, img->format, &r, &g, &b);
	  avg = ((0.3f * r+ 0.59f * g+ 0.11f * b)/3);
	  pixel = SDL_MapRGB(img->format, avg, avg, avg);
	  putpixel(img,(unsigned) x,(unsigned) y, pixel);
	 }
    }
}

void binarize(SDL_Surface *img)
{
  int    x;
  int    y;
  //  Uint8  avg;
  Uint8  r;
  Uint8  g;
  Uint8  b;
  Uint32 pixel;
  //  avg = 0;
  pixel = 0;
  for (x = 0; x < img->w; x++)
    {
      for (y = 0; y < img->h; y++)
	{
	  pixel = getpixel(img, (unsigned)x,(unsigned) y);
	  SDL_GetRGB(pixel, img->format, &r, &g, &b);
	  r = 0.3f * r;
	  if (r > 20)
	      {
		pixel = SDL_MapRGB(img->format, 255, 255, 255);
		putpixel(img,(unsigned) x,(unsigned) y, pixel);
	      }
	    else
	      {
		pixel = SDL_MapRGB(img->format,0, 0,0);
		putpixel(img,(unsigned) x,(unsigned) y, pixel);
	      }
	}
    }
}

void  color_block(SDL_Surface *img, unsigned xmin, unsigned xmax,
		   unsigned ymin, unsigned ymax)
{
  unsigned x;
  unsigned y;
  Uint32 pixel = 0;
  for (y = ymin; y < ymax; y++)
    {
      for (x = xmin; x < xmax; x++)
	    {
	      pixel = SDL_MapRGB(img->format,0,0,0);
	      putpixel(img,(unsigned) x,y, pixel);
	    }
    }
}


int line_is_blank(SDL_Surface *img, int y)
{
  int x = 0;

  while (x < img->w )
    {
      if(getpixel(img, (unsigned)x,(unsigned)y) == 0)
	  return 0;
      x++;
    }
  return 1;

}

int line_end(SDL_Surface *img, int x)
{
   while (x
     {
       if
     }
     
}


void       lines(SDL_Surface *img)
{
  //int first;
  //  int x;
  int y;
  /*
  unsigned ymin;
  unsigned ymax;
  ymin = 0;
  ymax = 0;
  first = 0;*/
  unsigned xmin;
  //unsigned xmax;

  xmin = 0;
  //xmax = 0;

  for (y = 0; y < img->h; y++)
    {
	  if (line_is_blank(img, y) == 0)
	    {
	      int x = 0;
	    while (getpixel(img, (unsigned)x,(unsigned) y) == 16777215)
	      {
		x++;
	      }
	    xmin = x;
	    printf("%u \n", xmin);
	    }
	   color_block(img, xmin, img->w,y,y+1);
    }
}





/*void     blocks(SDL_Surface *img)
{
  return;
  }*/





struct matrix *fill_matrix(SDL_Surface *img)
{
  size_t x;
  size_t y;

  struct matrix *car = malloc(sizeof(struct matrix));
  car = init_mat(16,16);
  for (x = 0; x < 16; x++)
    {
      for (y = 0; y < 16; y++)
	{
	  if (getpixel(img,(unsigned)x, (unsigned)y) == 0)
	    car->mat[y][x] = 0;
	  else
	    car->mat[y][x] = 1;
	}
    }
    return car;
    clean_mat(car);
}

int main(int argc, char *argv[])
{
  SDL_Surface      *img = load_image(argv[1]);
  greyscale(img);
  binarize(img);
  //  struct matrix *car = malloc(sizeof(struct matrix));
  //car = fill_matrix(img);
  //display_image(img);
  //  SDL_Surface *temp = binarize(img);
  //  display_image(img);
  lines(img);
  /*int test;
  for (int y=0; y< img->h-1;y++)
    {
      test =line_is_blank(img,y);
      printf("%u \n", test);
      }*/
  //color_block(img, 0, img->w, 0,img->h);
  display_image(img);
  //  print_mat(car);
  //img = temp;
  SDL_FreeSurface(img);
  return argc;
}
